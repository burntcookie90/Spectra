
require 'mustache'
require 'templates/template'

module Spectra

  class ObjcCategory < Mustache
    include Template 
    
    attr_accessor :is_header

    def initialize(attributes)
      super 
      self.is_header = attributes[:is_header]
      self.post_prefix_newlines = self.pre_suffix_newlines = 2
      self.intercolor_newlines  = is_header ? 1 : 2
    end
    
    ##
    ## Subclassing Hooks
    ##

    def prefix(spectrum)
      prefix =  "//\n"
      prefix << "// #{self.filename(spectrum)}\n"
      prefix << "// This file is generated by Spectrum, so don't expect to make any persistent changes.\n"
      prefix << "//\n\n"
      prefix +  "@#{self.is_header ? 'interface' : 'implementation'} UIColor (#{spectrum._prefix.upcase}Color)"
    end

    def format_color(color, name)
      signature = "+ (UIColor *)#{name}"
      if self.is_header
        "#{signature};"
      else
        "#{signature}\n{\n    return #{self.format_implementation(color)};\n}"
      end
    end

    def suffix(attributes)
      "@end"
    end

    def renamer
      @renamer ||= lambda { |name, prefix| "#{prefix}_#{name.camelize(false)}Color" }
    end

    ##
    ## Pathing Hooks
    ##

    def filename(spectrum)
      "UIColor+#{spectrum._prefix.upcase}Color.#{self.is_header ? 'h' : 'm'}"
    end
    
    ##
    ## Helpers
    ##

    def format_implementation(color)
      if color.white
        "[UIColor colorWithWhite:#{format_value(color.white)} alpha:#{format_value(color.alpha)}]"  
      else
        "[UIColor colorWithRed:#{format_value(color.red)} green:#{format_value(color.green)} blue:#{format_value(color.blue)} alpha:#{format_value(color.alpha)}]"
      end      
    end

    def format_value(value)
      '%.2f' % (value || 0.0) + 'f' 
    end
   
  end

end

