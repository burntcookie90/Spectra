
module Spectra

  ##
  ## Abstract Base
  ##

  module Formatter 
   
    attr_accessor :renamer
    attr_accessor :post_prefix_newlines, :intercolor_newlines, :pre_suffix_newlines
    
    def initialize(attributes)
      puts attributes
      self.renamer = attributes[:renamer] 
      self.post_prefix_newlines = self.intercolor_newlines = self.pre_suffix_newlines = 1
    end 

    ##
    ## Formatting
    ## 

    def format(spectrum)
      output = self.prefix(spectrum) + "\n" * self.post_prefix_newlines
      spectrum.colors.each_with_index { |color, index| output << format_indexed_color(color, index, spectrum) }
      output + "\n" * self.pre_suffix_newlines + self.suffix(spectrum)
    end

    def path
      './'
    end
    
    ##
    ## Helpers
    ##

    def format_indexed_color(color, index, spectrum)
      name     = self.format_name(color, spectrum)
      newlines = index < spectrum.colors.length - 1 ? self.intercolor_newlines : 0
      self.format_color(color, name) + "\n" * newlines
    end

    def format_name(color, spectrum)
      self.renamer.call(color.name, spectrum._prefix)
    end

    def prefix(spectrum)
      ""
    end

    def suffix(spectrum)
      ""
    end

    ##
    ## Factory
    ##
     
    def self.from_attributes(attributes)
      case attributes[:type].intern
        when :palette
          PaletteFormatter.new(attributes)
        when :objc    
          ObjcCategoryFormatter.new(attributes)
        when :swift   
          SwiftExtensionFormatter.new(attributes)
      end
    end

  end

  ##
  ## Concrete Types
  ##

  class PaletteFormatter 
    include Formatter 
    
    ##
    ## Formatting Hooks
    ##

    def prefix(spectrum)
      "11"
    end

    def format_color(color, name)
      components = [ color.red, color.green, color.blue, color.alpha ]
      components.inject('0') { |memo, value| memo << ' ' << '%.3f' % (value || 0.0) } + " #{name}"
    end

    def renamer
      @renamer ||= lambda { |name, prefix| name.camelize(true) }
    end

    ##
    ## Pathing Hooks
    ##
    
    def path
      "#{Dir.home}/Library/Colors/"
    end

    def filename(spectrum)
      "#{spectrum._prefix}-palette.clr"
    end

    ##
    ## Helpers
    ##

    def format_value(value)
      '%.3f' % (value || 0.0)
    end

  end

  class ObjcCategoryFormatter 
    include Formatter 
    
    attr_accessor :is_header

    def initialize(attributes)
      super 
      self.is_header = attributes[:is_header]
      self.post_prefix_newlines = self.pre_suffix_newlines = 2
      self.intercolor_newlines  = is_header ? 1 : 2
    end
    
    ##
    ## Subclassing Hooks
    ##

    def prefix(spectrum)
      prefix =  "//\n"
      prefix << "// #{self.filename(spectrum)}\n"
      prefix << "// This file is generated by Spectrum, so don't expect to make any persistent changes.\n"
      prefix << "//\n\n"
      prefix +  "@#{self.is_header ? 'interface' : 'implementation'} UIColor (#{spectrum._prefix.upcase}Color)"
    end

    def format_color(color, name)
      signature = "+ (UIColor *)#{name}"
      if self.is_header
        "#{signature};"
      else
        "#{signature}\n{\n    return #{self.format_implementation(color)};\n}"
      end
    end

    def suffix(attributes)
      "@end"
    end

    def renamer
      @renamer ||= lambda { |name, prefix| "#{prefix}_#{name.camelize(false)}Color" }
    end

    ##
    ## Pathing Hooks
    ##

    def filename(spectrum)
      "UIColor+#{spectrum._prefix.upcase}Color.#{self.is_header ? 'h' : 'm'}"
    end
    
    ##
    ## Helpers
    ##

    def format_implementation(color)
      if color.white
        "[UIColor colorWithWhite:#{format_value(color.white)} alpha:#{format_value(color.alpha)}]"  
      else
        "[UIColor colorWithRed:#{format_value(color.red)} green:#{format_value(color.green)} blue:#{format_value(color.blue)} alpha:#{format_value(color.alpha)}]"
      end      
    end

    def format_value(value)
      '%.2f' % (value || 0.0) + 'f' 
    end
   
  end

  class SwiftExtensionFormatter
    include Formatter

  end 

end

